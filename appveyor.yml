environment:
  global:
    # This will be used as part of the zipfile name
    # TODO change the project name
    PROJECT_NAME: dose-response
  # TODO feel free to delete targets/channels you don't need
  matrix:
    # Stable channel
    # NOTE: we've disabled the gnu/mingw targets for now because the compiler
    # isn't being installed/found. So we'll have to deal with that later.
    # - TARGET: i686-pc-windows-gnu
    #   CHANNEL: stable
    - TARGET: i686-pc-windows-msvc
      REDIST_ARCH: x86
      CHANNEL: stable
    # - TARGET: x86_64-pc-windows-gnu
    #   CHANNEL: stable
    - TARGET: x86_64-pc-windows-msvc
      REDIST_ARCH: x64
      CHANNEL: stable

# Install Rust and Cargo
# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)
install:
  - curl -sSf -o rustup-init.exe https://win.rustup.rs
  - rustup-init.exe --default-host %TARGET% --default-toolchain %CHANNEL% -y
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

# 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents
# the "directory does not contain a project or solution file" error.
# source: https://github.com/starkat99/appveyor-rust/blob/master/appveyor.yml#L113
build: false

# Equivalent to Travis' `script` phase
# TODO modify this phase as you see fit
test_script:
  - cargo build --verbose
  # NOTE: disable cargo run. It's a GUI/GL app. Running it will fail.
  # - cargo run
  - cargo test

before_deploy:
  # Generate artifacts for release
  - cargo build --release
  - mkdir staging
  - mkdir staging\fonts
  - mkdir staging\build
  # TODO update this part to copy the artifacts that make sense for your project
  - copy target\release\dose-response.exe staging
  - cd target\release\build\tcod-sys-*\out
  - copy * ..\..\..\..\..\staging
  - cd ..\..\..\..\..\
  - xcopy fonts staging\fonts /s /e /y
  - xcopy target\release\build staging\build /s /e /y
  - xcopy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\%REDIST_ARCH%\Microsoft.VC140.CRT" staging /s /e /y
  - cd staging
    # release zipfile will look like 'dose-response-v1.2.3-x86_64-pc-windows-msvc'
  - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip *
  - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip

deploy:
  description: 'Windows release'
  # All the zipped artifacts will be deployed
  artifact: /.*\.zip/
  # TODO Regenerate this auth_token for your project, this one won't work for you. Here's how:
  # - Go to 'https://github.com/settings/tokens/new' and generate a Token with only the
  # `public_repo` scope enabled
  # - Then go to 'https://ci.appveyor.com/tools/encrypt' and enter the newly generated token.
  # - Enter the "encrypted value" below
  auth_token:
    secure: /ItkeB7N8x3jUWjM0NWJhVPjx5jaEcEGgTC1GYWUGCHQSQwKcQ/tUqoGj7+HwaCk
  provider: GitHub
  # deploy when a new tag is pushed and only on the stable channel
  on:
    # channel to use to produce the release artifacts
    # NOTE make sure you only release *once* per target
    # TODO you may want to pick a different channel
    CHANNEL: stable
    appveyor_repo_tag: true

branches:
  only:
    - master
    # IMPORTANT Regex to match tags. Required, or appveyor may not trigger deploys when a new tag
    # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22
    - /^v\d+\.\d+\.\d+.*$/
